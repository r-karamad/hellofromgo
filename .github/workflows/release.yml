name: Release

on:
  push:
    # run only against tags in format v1.2.3
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    # branches: [ main ]
    
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true

      # - name: Import GPG key
      #   id: gpg
      #   uses: crazy-max/ghaction-import-gpg@v5
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # - name: List GPG keys
      #   run: gpg -K
      
      - name: Generate go.sum file
        run: go mod tidy
        
      - name: Run goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{secrets.DOCKER_USER}}/hellofromgo

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USERNAME : ${{ secrets.USERNAME  }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} '
            scp -i private_key private_key ${USERNAME}@${HOSTNAME}:/home/ubuntu
          '